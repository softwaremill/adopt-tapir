@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import cats.effect._
import cats.effect.std.Dispatcher
import io.vertx.core.Vertx
import io.vertx.ext.web.Router
import sttp.tapir.server.vertx.cats.@if(addMetrics){{VertxCatsServerInterpreter, VertxCatsServerOptions}}else{VertxCatsServerInterpreter}
import sttp.tapir.server.vertx.cats.VertxCatsServerInterpreter._

object Main extends IOApp:

  override def run(args: List[String]): IO[ExitCode] =
    val port = sys.env.get("HTTP_PORT").flatMap(_.toIntOption).getOrElse(8080)

    val vertx = Vertx.vertx()
    val server = vertx.createHttpServer()
    val router = Router.router(vertx)

    Dispatcher[IO]
      @if(addMetrics) {
      .map(d => {
        VertxCatsServerOptions
          .customiseInterceptors(d)
          .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
          .options
      })
      }
      .use { @if(addMetrics) {serverOptions} else {dispatcher} =>
        for {
          bind <- IO.delay {
            Endpoints.all
              .foreach(endpoint => {
                VertxCatsServerInterpreter[IO](@if(addMetrics) {serverOptions} else {dispatcher})
                  .route(endpoint)
                  .apply(router)
              })
            server.requestHandler(router).listen(port)
          }.flatMap(_.asF[IO])
          _ <- IO.println(s"@if(addDocumentation){Go to http://localhost:${bind.actualPort()}/docs to open SwaggerUI. }else{Server started at http://localhost:${bind.actualPort()}. }Press ENTER key to exit.")
          _ <- IO.readLine
          _ <- IO.delay(server.close).flatMap(_.asF[IO].void)
        } yield bind
      }
      .as(ExitCode.Success)
