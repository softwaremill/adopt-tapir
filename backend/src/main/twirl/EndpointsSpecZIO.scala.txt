@(
starterDetails: com.softwaremill.adopttapir.starter.StarterDetails,
additionalImports: List[com.softwaremill.adopttapir.template.scala.Import],
helloStub: String,
booksStub: String,
scalaVersion: com.softwaremill.adopttapir.starter.ScalaVersion,
jsonImplementation: com.softwaremill.adopttapir.starter.JsonImplementation,
leftBracket: Char = '{',
rightBracket: Char = '}'
)
package @{starterDetails.groupId}

import @{starterDetails.groupId}.Endpoints.@if(scalaVersion == com.softwaremill.adopttapir.starter.ScalaVersion.Scala2){_}else{@leftBracket*,given@rightBracket}
import sttp.client3.testing.SttpBackendStub
import sttp.client3.{UriContext, basicRequest}
import sttp.tapir.server.stub.TapirStubInterpreter
import zio.test.Assertion.@if(scalaVersion == com.softwaremill.adopttapir.starter.ScalaVersion.Scala2){_}else{*}
import zio.test.{ZIOSpecDefault, assertZIO}
@for(additionalImport <- additionalImports) {
@{additionalImport.asScalaImport(scalaVersion)}}

object EndpointsSpec extends ZIOSpecDefault@if(scalaVersion == com.softwaremill.adopttapir.starter.ScalaVersion.Scala2){ @leftBracket}else{:}
@if(jsonImplementation == com.softwaremill.adopttapir.starter.JsonImplementation.Pickler){
  given Reader[Author] = upickle.default.macroR
  given Reader[Book] = upickle.default.macroR
}

  def spec = suite("Endpoints spec")(
    test("return hello message") {
    //given
    @helloStub

    //when
    val response = basicRequest
      .get(uri"http://test.com/hello?name=adam")
      .send(backendStub)

    // then
    assertZIO(response.map(_.body))(isRight(equalTo("Hello adam")))
    }
@if(booksStub.nonEmpty){
    ,test("list available books") {
      // given
      @booksStub

      // when
      val response = basicRequest
        .get(uri"http://test.com/books/list/all")
        .response(asJson[List[Book]])
        .send(backendStub)

      // then
      assertZIO(response.map(_.body))(isRight(equalTo(books)))
    }
}
  )
@if(scalaVersion == com.softwaremill.adopttapir.starter.ScalaVersion.Scala2){@rightBracket}
