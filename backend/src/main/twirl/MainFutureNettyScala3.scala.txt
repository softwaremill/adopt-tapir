@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import sttp.tapir.server.netty.@if(addMetrics){{NettyFutureServer, NettyFutureServerOptions}}else{NettyFutureServer}

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContext, Future}
import scala.io.StdIn
import ExecutionContext.Implicits.global

@@main def run(): Unit =
  @if(addMetrics) {
  val serverOptions = NettyFutureServerOptions.customiseInterceptors
    .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
    .options
  }
  val port = sys.env.get("HTTP_PORT").flatMap(_.toIntOption).getOrElse(8080)
  val program =
    for
      binding <- NettyFutureServer(@if(addMetrics) {serverOptions}).port(port).addEndpoints(Endpoints.all).start()
      _ <- Future {
        println(s"@if(addDocumentation){Go to http://localhost:${binding.port}/docs to open SwaggerUI. }else{Server started at http://localhost:${binding.port}. }Press ENTER key to exit.")
        StdIn.readLine()
      }
      stop <- binding.stop()
    yield stop

  Await.result(program, Duration.Inf)
