@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import sttp.tapir.server.ziohttp.@if(addMetrics){{ZioHttpInterpreter, ZioHttpServerOptions}}else{ZioHttpInterpreter}
import zhttp.http.HttpApp
import zhttp.service.server.ServerChannelFactory
import zhttp.service.{EventLoopGroup, Server}
import zio.{Console, Scope, ZIO, ZIOAppArgs, ZIOAppDefault}

object Main extends ZIOAppDefault {

  override def run: ZIO[Any with ZIOAppArgs with Scope, Any, Any] = {
    @if(addMetrics) {
    val serverOptions: ZioHttpServerOptions[Any] =
      ZioHttpServerOptions.customiseInterceptors
        .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
        .options
    val app: HttpApp[Any, Throwable] = ZioHttpInterpreter(serverOptions).toHttp(Endpoints.all)
    } else {
    val app: HttpApp[Any, Throwable] = ZioHttpInterpreter().toHttp(Endpoints.all)
    }

    (for {
      serverStart <- Server(app).withPort(8080).make
      _ <- Console.printLine(@if(addDocumentation){"Go to http://localhost:8080/docs to open SwaggerUI. Press any key to exit."}else{"Server started at http://localhost:8080. Press any key to exit."})
      _ <- Console.readLine
    } yield serverStart)
      .provideSomeLayer(EventLoopGroup.auto(0) ++ ServerChannelFactory.auto ++ Scope.default)
      .exitCode
  }
}
