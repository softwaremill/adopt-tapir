@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import sttp.tapir.server.akkahttp.@if(addMetrics){{AkkaHttpServerInterpreter, AkkaHttpServerOptions}}else{AkkaHttpServerInterpreter}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.io.StdIn

object Main {

  def main(args: Array[String]): Unit = {
    implicit val actorSystem: ActorSystem = ActorSystem()

    @if(addMetrics) {
    val serverOptions: AkkaHttpServerOptions =
      AkkaHttpServerOptions.customiseInterceptors
        .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
        .options

    val route = AkkaHttpServerInterpreter(serverOptions).toRoute(Endpoints.all)
    } else {
    val route = AkkaHttpServerInterpreter().toRoute(Endpoints.all)
    }

    val port = sys.env.get("http.port").map(_.toInt).getOrElse(8080)

    val bindingFuture = Http()
      .newServerAt("localhost", port)
      .bindFlow(route)
      .map { binding =>
         println(s"@if(addDocumentation){Go to http://localhost:${binding.localAddress.getPort}/docs to open SwaggerUI.}else{Server started at http://localhost:${binding.localAddress.getPort}.} Press ENTER key to exit.")
         binding
      }

    StdIn.readLine()

    bindingFuture.flatMap(_.unbind()).onComplete(_ => actorSystem.terminate())
  }
}
