@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import sttp.tapir.server.akkahttp.@if(addMetrics){{AkkaHttpServerInterpreter, AkkaHttpServerOptions}}else{AkkaHttpServerInterpreter}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.io.StdIn

object Main {

  def main(args: Array[String]): Unit = {
    implicit val actorSystem: ActorSystem = ActorSystem()

    @if(addMetrics) {
    val serverOptions: AkkaHttpServerOptions =
      AkkaHttpServerOptions.customiseInterceptors
        .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
        .options

    val route = AkkaHttpServerInterpreter(serverOptions).toRoute(Endpoints.all)
    } else {
    val route = AkkaHttpServerInterpreter().toRoute(Endpoints.all)
    }

    val bindingFuture = Http()
      .newServerAt("localhost", 8080)
      .bindFlow(route)

    @if(addDocumentation){println("Go to http://localhost:8080/docs to open SwaggerUI. Press any key to exit.")}else{println("Server started at http://localhost:8080. Press any key to exit.")}
    StdIn.readLine()

    bindingFuture.flatMap(_.unbind()).onComplete(_ => actorSystem.terminate())
  }
}
