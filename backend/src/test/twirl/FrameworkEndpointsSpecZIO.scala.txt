@(
starterDetails: com.softwaremill.adopttapir.starter.StarterDetails,
additionalImports: List[com.softwaremill.adopttapir.template.scala.Import],
metricsStub: String,
docsStub: String,
)
package @{starterDetails.groupId}

import @{starterDetails.groupId}.Endpoints._
import sttp.client3.testing.SttpBackendStub
import sttp.client3.{UriContext, basicRequest}
import sttp.tapir.server.stub.TapirStubInterpreter
import zio.test.Assertion._
import zio.test.{ZIOSpecDefault, assertZIO}
@for(additionalImport <- additionalImports) {
@{additionalImport.asScalaImport()}}

object FrameworkEndpointsSpec extends ZIOSpecDefault {
  def spec = suite("Framework Endpoints spec")(
@if(metricsStub.nonEmpty){
    test("return metrics definition") {
      // given
      @metricsStub

      // when
      val response = basicRequest
        .get(uri"http://test.com/metrics")
        .send(backendStub)

      // then
      assertZIO(response.map(_.body))(
        isRight(
          containsString("# HELP tapir_request_active Active HTTP requests")
            && containsString("# TYPE tapir_request_duration_seconds histogram")
            && containsString("# HELP tapir_request_total Total HTTP requests")
            && containsString("# TYPE tapir_request_total counter")
            && containsString("# HELP tapir_request_active Active HTTP requests")
            && containsString("# TYPE tapir_request_active gauge")
        )
      )
    }
}@if(docsStub.nonEmpty){@if(metricsStub.nonEmpty){,}
    test("return docs document") {
      // given
      @docsStub

      // when
      val response = basicRequest
        .get(uri"http://localhost/docs/docs.yaml")
        .send(backendStub)

      // then
      assertZIO(response.map(_.body))(
        isRight(containsString("paths:\n  /hello:"))
      )
    }
}
  )
}
